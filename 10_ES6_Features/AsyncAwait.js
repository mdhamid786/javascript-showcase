// =========================================================
// üåü JavaScript Async / Await ‚Äî Basic to Advanced
// =========================================================
//
// üß† THEORY OVERVIEW
// ---------------------------------------------------------
// üîπ async/await is built on top of Promises
// üîπ async function always returns a Promise
// üîπ await pauses async function until the Promise settles
// üîπ try/catch handles rejections cleanly
// üîπ await only works inside async functions (or top-level ES2022)
// üîπ Execution continues after await in microtask queue
// üîπ Use Promise.all() for parallel, sequential awaits for dependent tasks
// üîπ await in loops runs sequentially; prefer Promise.all() for concurrency
// üîπ Async functions improve readability & maintainability of async code
//
// =========================================================
// üî∏ 1. Basic Example
// =========================================================

function fetchData() {
  return new Promise((resolve) => {
    setTimeout(() => resolve("‚úÖ Data loaded"), 1000);
  });
}

async function getData() {
  // console.log("Fetching...");
  const result = await fetchData();
  // console.log(result);
}

getData();

// =========================================================
// üî∏ 2. How async functions work
// =========================================================

async function example() {
  return 42; // Returns a Promise that resolves with 42
}

example().then(
  // console.log
);

// =========================================================
// üî∏ 3. Error Handling (try/catch)
// =========================================================

async function fetchUserData() {
  try {
    const response = await Promise.reject("‚ùå Network error");
    // console.log(response);
  } catch (error) {
    // console.error("Caught Error:", error);
  } finally {
    // console.log("Finally block always runs");
  }
}

fetchUserData();

// =========================================================
// üî∏ 4. Sequential vs Parallel Execution
// =========================================================

async function sequentialExample() {
  const a = await Promise.resolve("A done");
  const b = await Promise.resolve("B done");
  // console.log(a, b);
}

async function parallelExample() {
  const [a, b] = await Promise.all([
    Promise.resolve("A done"),
    Promise.resolve("B done"),
  ]);
  // console.log(a, b);
}

sequentialExample();
parallelExample();

// =========================================================
// üî∏ 5. Async in Loops
// =========================================================

const items = [1, 2, 3];

async function wrongLoop() {
  items.forEach(async (item) => {
    await new Promise((r) => setTimeout(r, 500));
    // console.log("Wrong:", item);
  });
}

async function correctLoop() {
  for (const item of items) {
    await new Promise((r) => setTimeout(r, 500));
    // console.log("Correct:", item);
  }
}

wrongLoop();
correctLoop();

// =========================================================
// üî∏ 6. Using await with Fetch API (simulated)
// =========================================================

async function fetchUser() {
  try {
    const data = await new Promise((resolve) =>
      setTimeout(() => resolve({ name: "Ali", age: 25 }), 1000)
    );
    // console.log("User:", data);
  } catch (err) {
    // console.error("Error:", err);
  }
}

fetchUser();

// =========================================================
// üî∏ 7. await inside non-async functions ‚ùå
// =========================================================

(async () => {
  const result = await Promise.resolve("‚úÖ Works inside async IIFE");
  // console.log(result);
})();

// =========================================================
// üî∏ 8. Async/Await with try/catch and finally
// =========================================================

async function processPayment() {
  try {
    const status = await Promise.resolve("üí∞ Payment successful");
    // console.log(status);
  } catch (err) {
    // console.error("‚ùå Payment failed:", err);
  } finally {
    // console.log("üßæ Closing payment session");
  }
}

processPayment();

// =========================================================
// üî∏ 9. Combining async/await with Promise utilities
// =========================================================

async function handleTasks() {
  const results = await Promise.allSettled([
    Promise.resolve("‚úÖ Done"),
    Promise.reject("‚ùå Failed"),
  ]);
  // console.log(results);
}

handleTasks();

// =========================================================
// üî∏ 10. Real-World Example ‚Äî Retry Logic
// =========================================================

async function fetchWithRetry(task, retries = 3) {
  while (retries > 0) {
    try {
      const result = await task();
      return result;
    } catch (err) {
      // console.warn(`Retrying... (${retries - 1} left)`);
      retries--;
      if (retries === 0) throw err;
    }
  }
}

const unstableTask = () =>
  new Promise((resolve, reject) =>
    Math.random() > 0.5 ? resolve("‚úÖ Success") : reject("‚ùå Random fail")
  );

fetchWithRetry(unstableTask)
  .then(
    // console.log
  )
  .catch(
    // console.error
  );

// =========================================================
// üî∏ 11. Logical Example ‚Äî Timeout Wrapper
// =========================================================

async function timeoutPromise(promise, ms) {
  const timeout = new Promise((_, reject) =>
    setTimeout(() => reject("‚è∞ Timeout"), ms)
  );
  return Promise.race([promise, timeout]);
}

(async () => {
  try {
    const data = await timeoutPromise(
      new Promise((resolve) =>
        setTimeout(() => resolve("‚úÖ Fast Response"), 500)
      ),
      1000
    );
    // console.log(data);
  } catch (err) {
    // console.error(err);
  }
})();

// =========================================================
// üî∏ 12. Microtask Queue Behavior
// =========================================================

async function microtaskExample() {
  // console.log("1");
  await null;
  // console.log("2");
}
microtaskExample();
// console.log("3");

// =========================================================
// üî∏ 13. Nested Async/Await (Dependency chain)
// =========================================================

async function getUser() {
  return { id: 1, name: "Ali" };
}
async function getOrders(userId) {
  return [`Order for user ${userId}`];
}
async function getSummary() {
  const user = await getUser();
  const orders = await getOrders(user.id);
  // console.log("Summary:", user.name, orders);
}

getSummary();

// =========================================================
// üî∏ 14. Common Mistakes
// =========================================================
//
// ‚ùå Using await in forEach()
// ‚ùå Forgetting try/catch
// ‚ùå Blocking sequential awaits unnecessarily
// ‚ùå Returning values without await in dependent async tasks
// ‚ùå Ignoring Promise rejections
//

// =========================================================
// üî∏ 15. Challenge ‚Äî Sequential API Simulation
// =========================================================

async function fetchProfile() {
  await new Promise((r) => setTimeout(r, 1000));
  return "üë§ Profile loaded";
}

async function fetchPosts() {
  await new Promise((r) => setTimeout(r, 1000));
  return "üìù Posts loaded";
}

async function dashboardLoad() {
  // console.time("Load Time");
  const profile = await fetchProfile();
  const posts = await fetchPosts();
  // console.log(profile, posts);
  // console.timeEnd("Load Time");
}

dashboardLoad();

async function dashboardParallel() {
  // console.time("Parallel Load Time");
  const [profile, posts] = await Promise.all([fetchProfile(), fetchPosts()]);
  // console.log(profile, posts);
  // console.timeEnd("Parallel Load Time");
}

dashboardParallel();


// =========================================================
// üß† INTERVIEW QUESTIONS (Basic ‚Üí Advanced)
// =========================================================

// ‚úÖ BASIC
// 1Ô∏è‚É£ What is async/await in JS?
// 2Ô∏è‚É£ What does an async function always return?
// 3Ô∏è‚É£ Can await be used outside an async function?
// 4Ô∏è‚É£ How do you handle errors in async functions?
// 5Ô∏è‚É£ Difference between async/await and Promise.then?
// 6Ô∏è‚É£ Why use async/await?
// 7Ô∏è‚É£ What happens if you forget to use await?
// 8Ô∏è‚É£ Can async/await be mixed with .then()? When?

// ‚úÖ INTERMEDIATE
// 9Ô∏è‚É£ Difference between sequential and parallel awaits?
// üîü How does await work inside loops?
// 11Ô∏è‚É£ Why doesn‚Äôt await work inside forEach()?
// 12Ô∏è‚É£ Explain microtask queue and async function order.
// 13Ô∏è‚É£ What happens when an awaited Promise rejects?
// 14Ô∏è‚É£ How can you use await for timeout handling?
// 15Ô∏è‚É£ How can async/await improve callback-based APIs?

// ‚úÖ ADVANCED
// 16Ô∏è‚É£ Explain Promise.all() vs Promise.allSettled() vs Promise.any().
// 17Ô∏è‚É£ What is top-level await? Where is it used?
// 18Ô∏è‚É£ How to retry async operations on failure?
// 19Ô∏è‚É£ How to cancel async operations? (AbortController)
// 20Ô∏è‚É£ How to limit concurrency with async/await?
// 21Ô∏è‚É£ How to run dependent async tasks in sequence?
// 22Ô∏è‚É£ Explain concurrency vs parallelism in JS async model.
// 23Ô∏è‚É£ How does async/await interact with event loop & microtasks?
// 24Ô∏è‚É£ Is async/await blocking the main thread?
// 25Ô∏è‚É£ Can async be used with constructors?

// ‚úÖ LOGICAL / CODING
// üí° Implement sequential and parallel API calls.
// üí° Write retry logic for failed async tasks.
// üí° Create a timeoutPromise wrapper using Promise.race.
// üí° Build async queue runner with concurrency control.
// üí° Simulate async tasks that depend on each other.
// üí° Compare execution time between sequential vs parallel async code.
//
// ---------------------------------------------------------
// üèÅ END OF FILE
// =========================================================
