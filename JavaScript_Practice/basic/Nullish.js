// =========================================================
// üåü JavaScript Nullish Coalescing Operator (??)
// =========================================================

// =========================================================
// üî∏ 1. Basic Example
// =========================================================
// The nullish coalescing operator (??) returns the right-hand value 
// only when the left-hand value is null or undefined (NOT falsy like 0 or "")
let username = null;
let displayName = username ?? "Guest";
// console.log(displayName); // "Guest"

// =========================================================
// üî∏ 2. Difference between || (OR) and ?? (Nullish)
// =========================================================
let value1 = 0 || 100;   // OR treats 0 as falsy ‚Üí returns 100
let value2 = 0 ?? 100;   // ?? ignores 0 (not null/undefined) ‚Üí returns 0
// console.log(value1, value2); // 100, 0

// =========================================================
// üî∏ 3. Nested Nullish Coalescing
// =========================================================
let first = null;
let second = undefined;
let third = "Valid";
let result = first ?? second ?? third;
// console.log(result); // "Valid"

// =========================================================
// üî∏ 4. Practical Example: Default Settings
// =========================================================
function setup(options) {
  const theme = options.theme ?? "light";
  const language = options.language ?? "en";
  // console.log(`Theme: ${theme}, Language: ${language}`);
}
setup({ theme: null }); // Theme: light, Language: en

// =========================================================
// üî∏ 5. Chaining ?? with Optional Chaining (?.)
// =========================================================
const user = { profile: { name: null } };
const userName = user?.profile?.name ?? "Anonymous";
// console.log(userName); // "Anonymous"

// =========================================================
// üî∏ 6. Avoiding TypeError
// =========================================================
const config = null;
const retryCount = config?.maxRetries ?? 3;
// console.log(retryCount); // 3

// =========================================================
// üî∏ 7. Logical Example: Fallback API Data
// =========================================================
const apiResponse = { status: "ok", data: null };
const data = apiResponse.data ?? "No Data Available";
// console.log(data); // "No Data Available"

// =========================================================
// üî∏ 8. Nullish Assignment (??=)
// =========================================================
// Shorthand for: if (x is null or undefined) then assign new value
let retries = null;
retries ??= 5;
// console.log(retries); // 5

let limit = 0;
limit ??= 10; // stays 0 because it's not null or undefined
// console.log(limit); // 0

// =========================================================
// üî∏ 9. Real-world Example: Environment Variables
// =========================================================
const PORT = process.env.PORT ?? 5000;
// console.log(`Server running on port ${PORT}`);

// =========================================================
// üî∏ 10. Combining ?? and &&
// =========================================================
// Safe conditional logic
const configObj = { debug: false };
const debugMode = configObj.debug ?? true;
// console.log(debugMode); // false (since debug is defined)

// =========================================================
// üî∏ 11. Logical Challenge Example
// =========================================================
function getDiscount(user) {
  const discount = user?.membership?.discount ?? 0;
  return `Discount: ${discount}%`;
}

const userA = { membership: { discount: 20 } };
const userB = { membership: { discount: null } };
const userC = {};

getDiscount(userA); // "Discount: 20%"
getDiscount(userB); // "Discount: 0%"
getDiscount(userC); // "Discount: 0%"

// =========================================================
// üî∏ 12. Edge Cases
// =========================================================
// 0, false, and '' are not nullish ‚Üí kept as-is
let a = 0 ?? 10; // 0
let b = false ?? true; // false
let c = "" ?? "default"; // ""
// console.log(a, b, c);

// =========================================================
// üß† THEORY SECTION
// =========================================================
/*
üîπ The Nullish Coalescing Operator (??)
   - Introduced in ES2020 (ES11)
   - Used to provide a default value ONLY when the left side is null or undefined.

üîπ Difference with Logical OR (||)
   - || considers 0, '', false as falsy ‚Üí replaces them
   - ?? ignores 0, '', false (only reacts to null or undefined)

üîπ Common Use-Cases:
   1Ô∏è‚É£ Defaulting API or user input values
   2Ô∏è‚É£ Safe fallbacks for environment variables
   3Ô∏è‚É£ Handling optional properties without overwriting valid falsy values
   4Ô∏è‚É£ Combine with optional chaining for safe access

üîπ Syntax:
   result = leftExpr ?? rightExpr;
   result = leftExpr ?? (rightExpr ?? defaultValue);

üîπ Nullish Assignment (??=)
   variable ??= value;
   // Assigns only if variable is null or undefined
*/

// =========================================================
// üß† INTERVIEW QUESTIONS (Basic ‚Üí Advanced)
// =========================================================
/*
üî∏ BASIC
1Ô∏è‚É£ What does the nullish coalescing operator (??) do in JavaScript?
2Ô∏è‚É£ How is ?? different from the logical OR (||) operator?
3Ô∏è‚É£ What values are considered ‚Äúnullish‚Äù?
4Ô∏è‚É£ What is the output of: let x = 0 ?? 100?

üî∏ INTERMEDIATE
5Ô∏è‚É£ Why would you use ?? over || when setting defaults?
6Ô∏è‚É£ How does ?? work with optional chaining (?.)?
7Ô∏è‚É£ What is the purpose of the ??= operator?
8Ô∏è‚É£ When is ?? useful in real-world applications like configuration or API responses?

üî∏ ADVANCED / LOGICAL
9Ô∏è‚É£ Write a function that safely retrieves deeply nested object properties using ?? and ?.
üîü Combine ?? and Promise results to handle default values if an API fails.
11Ô∏è‚É£ Explain how ?? avoids overwriting legitimate falsy values in input validation.
12Ô∏è‚É£ How does JavaScript internally evaluate ?? ‚Äî what short-circuiting behavior does it follow?
13Ô∏è‚É£ Why can‚Äôt you mix ?? directly with || or && without parentheses?
14Ô∏è‚É£ What‚Äôs the output of:
    console.log(null || 0 ?? 'A'); // ?
    console.log((null || 0) ?? 'A'); // ?
    // Understanding operator precedence
*/

// =========================================================
// üß© ADVANCED LOGICAL CHALLENGE
// =========================================================
function safeConfig(config) {
  return {
    host: config?.host ?? "localhost",
    port: config?.port ?? 8080,
    secure: config?.secure ?? false,
  };
}

const cfg1 = { host: "api.com", secure: true };
const cfg2 = { port: 3000 };
const cfg3 = null;

safeConfig(cfg1); // {host:'api.com', port:8080, secure:true}
safeConfig(cfg2); // {host:'localhost', port:3000, secure:false}
safeConfig(cfg3); // {host:'localhost', port:8080, secure:false}
