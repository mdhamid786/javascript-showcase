// =========================================================
// üåü JavaScript Optional Chaining (?.) ‚Äî Basic to Advanced
// =========================================================

// =========================================================
// üî∏ 1. Basic Usage
// =========================================================
// Accessing nested properties safely without throwing errors
const user = { profile: { name: "Ali" } };

const userName = user?.profile?.name; // "Ali"
const city = user?.address?.city;     // undefined (instead of error)

// =========================================================
// üî∏ 2. Optional Function Calls
// =========================================================
const person = {
  greet: (name) => `Hello, ${name}!`
};

const greeting = person.greet?.("Ali"); // "Hello, Ali!"
const missingGreet = person.sayHi?.("Ali"); // undefined (safe)

// =========================================================
// üî∏ 3. Optional Array Access
// =========================================================
const items = [10, 20, 30];
const first = items?.[0]; // 10
const tenth = items?.[9]; // undefined

// =========================================================
// üî∏ 4. Default Values with ??
// =========================================================
const data = user?.address?.city ?? "No City";
const zip = user?.address?.zip ?? 110001;
// console.log(data, zip);

// =========================================================
// üî∏ 5. Optional Chaining in Loops / Functions
// =========================================================
function printUserStreet(userObj) {
  const street = userObj?.address?.street ?? "Street not available";
  // console.log(street);
}

printUserStreet({ address: { street: "MG Road" } }); // MG Road
printUserStreet({}); // Street not available

// =========================================================
// üî∏ 6. Real-world Example: API Responses
// =========================================================
const apiResponse = {
  data: {
    user: { profile: { age: 25 } }
  }
};

const userAge = apiResponse?.data?.user?.profile?.age ?? "Age unknown";
// console.log(userAge); // 25

const userEmail = apiResponse?.data?.user?.profile?.email ?? "No Email";
// console.log(userEmail); // No Email

// =========================================================
// üî∏ 7. Optional Chaining with Methods
// =========================================================
const obj = {
  hello: () => "Hi!"
};
const val1 = obj.hello?.(); // "Hi!"
const val2 = obj.bye?.();   // undefined

// =========================================================
// üî∏ 8. Combination with ?? and ??
// =========================================================
const config = { debug: false, maxRetries: 0 };
const debugMode = config?.debug ?? true;       // false
const retries = config?.maxRetries ?? 3;       // 0

// =========================================================
// üî∏ 9. Avoiding Errors
// =========================================================
// Without optional chaining
// const street = user.address.street; // Error if address is undefined

// With optional chaining
const streetSafe = user?.address?.street; // undefined (safe)

// =========================================================
// üî∏ 10. Logical Example ‚Äî Deep Object Access
// =========================================================
const orders = [
  { id: 1, customer: { name: "Ali" } },
  { id: 2 } // customer missing
];

orders.forEach(order => {
  const customerName = order?.customer?.name ?? "Guest";
  // console.log(customerName); // Ali, Guest
});

// =========================================================
// üß† THEORY
// =========================================================
/*
1Ô∏è‚É£ Optional Chaining (?.) is used to safely access:
   - Nested object properties
   - Array elements
   - Function/method calls
   - Avoids TypeError when accessing undefined/null

2Ô∏è‚É£ Syntax:
   object?.property
   object?.[expr]
   object?.method()
   
3Ô∏è‚É£ Works well with nullish coalescing (??) to provide defaults

4Ô∏è‚É£ Benefits:
   - Reduces verbose checks: if(obj && obj.prop && ...)
   - Avoids runtime errors
   - Makes code cleaner and safer

5Ô∏è‚É£ Key Points:
   - Returns undefined if the property doesn‚Äôt exist
   - Stops evaluation immediately if any part is null/undefined
   - Only short-circuits at the undefined/null value
*/

// =========================================================
// üß† INTERVIEW QUESTIONS (Basic ‚Üí Advanced)
// =========================================================
/*
üî∏ BASIC
1Ô∏è‚É£ What is optional chaining (?.) in JavaScript?
2Ô∏è‚É£ How does ?. differ from normal property access?
3Ô∏è‚É£ What happens when you access a missing property using ?.?
4Ô∏è‚É£ Can you use optional chaining with arrays or functions?

üî∏ INTERMEDIATE
5Ô∏è‚É£ How does optional chaining work with nullish coalescing (??)?
6Ô∏è‚É£ What is the difference between obj?.prop and obj?.[expr]?
7Ô∏è‚É£ How can optional chaining prevent runtime errors?
8Ô∏è‚É£ Can optional chaining be chained multiple times for deep objects?

üî∏ ADVANCED / LOGICAL
9Ô∏è‚É£ Write a function that safely retrieves the nested property: user.profile.address.city
10Ô∏è‚É£ How can you combine ?. and ?? to provide default values in API responses?
11Ô∏è‚É£ How does JavaScript evaluate optional chaining internally?
12Ô∏è‚É£ Can you use optional chaining in combination with destructuring? Explain.
13Ô∏è‚É£ What are some pitfalls or things to avoid when using optional chaining?
14Ô∏è‚É£ Write a safe function call using optional chaining for an optional method: obj.maybeFunc()
*/

// =========================================================
// üß© ADVANCED LOGICAL CHALLENGE
// =========================================================
function getNestedValue(obj) {
  return obj?.level1?.level2?.level3 ?? "Default";
}

const test1 = { level1: { level2: { level3: "Found" } } }; // "Found"
const test2 = { level1: { level2: {} } };                   // "Default"
const test3 = null;                                        // "Default"
