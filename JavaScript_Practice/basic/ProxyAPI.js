// =========================================================
// üåü JavaScript Proxy API ‚Äî Basic to Advanced
// =========================================================

/*
üîπ What is Proxy?
A Proxy in JavaScript allows you to intercept and customize
operations performed on objects ‚Äî like reading, writing, deleting,
or calling functions.

It‚Äôs part of ES6 (ECMAScript 2015) and is commonly used for:
‚úÖ Data validation
‚úÖ Access control
‚úÖ Logging/debugging
‚úÖ Observing changes
‚úÖ Virtualization (lazy loading)
‚úÖ Framework internals (e.g., Vue.js reactivity)
*/

// =========================================================
// üî∏ 1. Basic Syntax
// =========================================================

/*
const proxy = new Proxy(target, handler);

target  ‚Üí the original object to wrap
handler ‚Üí object with "traps" (intercept methods)
*/

const user = { name: "Ali", age: 25 };

const proxy1 = new Proxy(user, {
  get(target, prop) {
    console.log(`Getting ${prop}`);
    return target[prop];
  },
});

console.log(proxy1.name); // Getting name ‚Üí Ali


// =========================================================
// üî∏ 2. Intercepting get, set, delete
// =========================================================

const product = { name: "Laptop", price: 1000 };

const proxy2 = new Proxy(product, {
  get(target, prop) {
    console.log(`GET: ${prop}`);
    return prop in target ? target[prop] : "‚ùå Not Found";
  },
  set(target, prop, value) {
    if (prop === "price" && value < 0) {
      throw new Error("Price cannot be negative!");
    }
    console.log(`SET: ${prop} = ${value}`);
    target[prop] = value;
    return true;
  },
  deleteProperty(target, prop) {
    console.log(`Deleting ${prop}`);
    delete target[prop];
    return true;
  },
});

console.log(proxy2.name); // GET: name ‚Üí Laptop
proxy2.price = 1500;      // SET: price = 1500
delete proxy2.name;       // Deleting name
// proxy2.price = -10;    // ‚ùå Error: Price cannot be negative!


// =========================================================
// üî∏ 3. Reflect + Proxy (Best Practice)
// =========================================================

const proxy3 = new Proxy(product, {
  get(target, prop, receiver) {
    console.log(`Accessing ${prop}`);
    return Reflect.get(target, prop, receiver);
  },
  set(target, prop, value, receiver) {
    console.log(`Updating ${prop}`);
    return Reflect.set(target, prop, value, receiver);
  },
});

proxy3.price = 2000; // Updating price
console.log(proxy3.price); // Accessing price ‚Üí 2000


// =========================================================
// üî∏ 4. Intercepting function calls (apply trap)
// =========================================================

function greet(name) {
  return `Hello, ${name}!`;
}

const proxyFn = new Proxy(greet, {
  apply(target, thisArg, args) {
    console.log(`Function called with args: ${args}`);
    return Reflect.apply(target, thisArg, args).toUpperCase();
  },
});

console.log(proxyFn("Ali")); // Function called... ‚Üí HELLO, ALI!


// =========================================================
// üî∏ 5. Construct Trap (Intercepting new)
// =========================================================

function Student(name) {
  this.name = name;
}

const StudentProxy = new Proxy(Student, {
  construct(target, args, newTarget) {
    console.log("Creating new student:", args);
    return Reflect.construct(target, args, newTarget);
  },
});

const s1 = new StudentProxy("Hamid"); // Creating new student: ['Hamid']
console.log(s1.name); // Hamid


// =========================================================
// üî∏ 6. has() Trap ‚Äî for `in` operator
// =========================================================

const secureUser = new Proxy({ name: "Ali", password: "12345" }, {
  has(target, prop) {
    if (prop === "password") {
      return false; // hide password property
    }
    return Reflect.has(target, prop);
  },
});

console.log("name" in secureUser); // true
console.log("password" in secureUser); // false


// =========================================================
// üî∏ 7. ownKeys() Trap ‚Äî Control Object.keys()
// =========================================================

const hidden = new Proxy({ a: 1, b: 2, secret: 99 }, {
  ownKeys(target) {
    return Reflect.ownKeys(target).filter(k => k !== "secret");
  },
});

console.log(Object.keys(hidden)); // ['a', 'b']


// =========================================================
// üî∏ 8. defineProperty() and deleteProperty()
// =========================================================

const defineProxy = new Proxy({}, {
  defineProperty(target, prop, descriptor) {
    console.log(`Defining ${prop}`);
    return Reflect.defineProperty(target, prop, descriptor);
  },
  deleteProperty(target, prop) {
    console.log(`Deleting property ${prop}`);
    return Reflect.deleteProperty(target, prop);
  },
});

Object.defineProperty(defineProxy, "x", { value: 10 });
delete defineProxy.x;


// =========================================================
// üî∏ 9. Real Use Case ‚Äî Validation Layer
// =========================================================

const userValidator = {
  name: "Hamid",
  age: 25,
};

const validatorProxy = new Proxy(userValidator, {
  set(target, prop, value) {
    if (prop === "age" && typeof value !== "number") {
      throw new TypeError("Age must be a number");
    }
    if (prop === "name" && value.length < 3) {
      throw new Error("Name too short!");
    }
    return Reflect.set(target, prop, value);
  },
});

validatorProxy.name = "Ali";  // ‚úÖ OK
validatorProxy.age = 30;      // ‚úÖ OK
// validatorProxy.age = "twenty"; // ‚ùå Error: Age must be a number


// =========================================================
// üî∏ 10. Advanced ‚Äî Auto Logger (Reactive Proxy)
// =========================================================

function createLogger(obj) {
  return new Proxy(obj, {
    get(target, prop) {
      console.log(`[GET] ${prop} ‚Üí ${target[prop]}`);
      return Reflect.get(target, prop);
    },
    set(target, prop, value) {
      console.log(`[SET] ${prop} = ${value}`);
      return Reflect.set(target, prop, value);
    },
  });
}

const settings = createLogger({ theme: "dark", version: 1 });
settings.theme; // [GET] theme ‚Üí dark
settings.version = 2; // [SET] version = 2


// =========================================================
// üî∏ 11. Logical Example ‚Äî Read-only Proxy
// =========================================================

const config = { appName: "MyApp", version: "1.0" };

const readOnly = new Proxy(config, {
  set() {
    throw new Error("‚ùå Cannot modify readonly object");
  },
});

console.log(readOnly.appName); // MyApp
// readOnly.appName = "NewApp"; // ‚ùå Error


// =========================================================
// üî∏ 12. Performance Monitor Example
// =========================================================

function createPerfProxy(target) {
  return new Proxy(target, {
    get(target, prop) {
      const start = performance.now();
      const result = Reflect.get(target, prop);
      const end = performance.now();
      console.log(`Access to ${prop} took ${end - start}ms`);
      return result;
    },
  });
}

const perfUser = createPerfProxy({ name: "Ali", age: 25 });
perfUser.name;


// =========================================================
// üß† Interview Questions (Basic ‚Üí Advanced)
// =========================================================

/*
Q1Ô∏è‚É£ What is a Proxy in JS?
A: An ES6 feature that wraps an object/function and allows intercepting 
   and redefining fundamental operations (get, set, apply, etc.)

Q2Ô∏è‚É£ Syntax of Proxy?
A: new Proxy(target, handler)

Q3Ô∏è‚É£ What are traps in Proxy?
A: The handler methods that intercept operations (like get, set, apply).

Q4Ô∏è‚É£ Common Traps:
   - get
   - set
   - has
   - deleteProperty
   - ownKeys
   - defineProperty
   - apply
   - construct

Q5Ô∏è‚É£ What is the difference between Proxy and Reflect?
A: Proxy intercepts operations, Reflect performs default behavior.
   Usually, both are used together.

Q6Ô∏è‚É£ Can you modify a function call using Proxy?
A: Yes, using the 'apply' trap.

Q7Ô∏è‚É£ Real-world uses of Proxy?
   ‚úÖ Validation (type/constraints)
   ‚úÖ Access control (private props)
   ‚úÖ Logging & debugging
   ‚úÖ Reactive UI frameworks (Vue, MobX)
   ‚úÖ Lazy loading

Q8Ô∏è‚É£ What happens if you return false from set trap?
A: Assignment will fail silently in non-strict mode, 
   or throw in strict mode.

Q9Ô∏è‚É£ Difference between Proxy and Object.defineProperty?
A:
| Proxy                      | Object.defineProperty      |
|-----------------------------|-----------------------------|
| Intercepts many operations  | Works on a single property  |
| Runtime interception        | Static descriptor setup     |
| Can intercept methods & keys| Only get/set descriptors    |

Qüîü Can Proxy be revoked?
A: Yes, using Proxy.revocable(target, handler)
   ‚Üí returns { proxy, revoke() }
*/

// =========================================================
// üî∏ 13. Bonus ‚Äî Revocable Proxy
// =========================================================

const { proxy, revoke } = Proxy.revocable({ msg: "Hello" }, {
  get(target, prop) {
    return Reflect.get(target, prop);
  },
});

console.log(proxy.msg); // Hello
revoke(); // disable further access
// console.log(proxy.msg); // ‚ùå TypeError: Cannot perform 'get' on a proxy that has been revoked
