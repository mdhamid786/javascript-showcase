// =========================================================
// üåü JavaScript BigInt ‚Äî Basic to Advanced
// =========================================================

// =========================================================
// üî∏ 1. Basic Usage
// =========================================================
// BigInt allows representation of integers larger than Number.MAX_SAFE_INTEGER
const big1 = 9007199254740991n; // "n" at the end makes it BigInt
const big2 = BigInt("9007199254740993");

const sum = big1 + big2; // 18014398509481984n
const diff = big2 - big1; // 2n
// console.log(sum, diff);

// =========================================================
// üî∏ 2. Operations with BigInt
// =========================================================
const mul = 10n * 3n;   // 30n
const div = 10n / 3n;   // 3n (truncated integer division)
const mod = 10n % 3n;   // 1n

// =========================================================
// üî∏ 3. Mixing BigInt with Number ‚ùå
// =========================================================
const num = 5;
// const invalid = big1 + num; // ‚ùå TypeError
const valid = big1 + BigInt(num); // ‚úÖ 9007199254740996n

// =========================================================
// üî∏ 4. Comparison with Numbers
// =========================================================
const isEqual = big1 == 9007199254740991; // true (loose equality)
const isStrictEqual = big1 === 9007199254740991; // false (different types)

// =========================================================
// üî∏ 5. Conversion
// =========================================================
const bigStr = big1.toString();  // "9007199254740991"
const bigNum = Number(big1);     // 9007199254740991 (unsafe if > MAX_SAFE_INTEGER)
const fromNum = BigInt(123);     // 123n
const fromStr = BigInt("456");   // 456n

// =========================================================
// üî∏ 6. Bitwise Operations
// =========================================================
const a = 8n; // 1000
const b = 3n; // 0011
const and = a & b; // 0n
const or = a | b;  // 11n
const xor = a ^ b; // 11n
const shift = a << 2n; // 32n

// =========================================================
// üî∏ 7. BigInt with Math functions ‚ùå
// =========================================================
// Most Math functions don't accept BigInt
// Math.sqrt(big1); // ‚ùå TypeError
// Use Number(big1) if safe

// =========================================================
// üî∏ 8. Logical / Practical Example ‚Äî Large IDs
// =========================================================
const orderId = 9007199254740995n;
const nextOrderId = orderId + 1n; // Safe large integer increment
// console.log(nextOrderId); // 9007199254740996n

// =========================================================
// üî∏ 9. Real-world Example ‚Äî Safe Timestamps
// =========================================================
const timestamp = 1672531199999n; // BigInt timestamp
const nextSecond = timestamp + 1000n;

// =========================================================
// üî∏ 10. Logical Example ‚Äî Looping BigInt
// =========================================================
let i = 0n;
const limit = 5n;
while (i < limit) {
  // console.log(i);
  i++;
}

// =========================================================
// üî∏ 11. Edge Cases
// =========================================================
const zero = 0n;
const neg = -123n;
const largeNum = BigInt(Number.MAX_SAFE_INTEGER) + 1n;

// =========================================================
// üß† THEORY
// =========================================================
/*
1Ô∏è‚É£ BigInt is a primitive type for representing integers with arbitrary precision.
2Ô∏è‚É£ Useful when Number type cannot safely store large integers (> 2^53 -1).
3Ô∏è‚É£ Always append `n` to literal numbers or use BigInt() constructor.
4Ô∏è‚É£ BigInt does NOT support decimal/floating point ‚Äî only integers.
5Ô∏è‚É£ Arithmetic operators (+, -, *, /, %, **) are supported.
6Ô∏è‚É£ Cannot mix BigInt with Number directly; must convert explicitly.
7Ô∏è‚É£ Comparison operators (==, !=, <, >) work as expected; strict equality (===) differs by type.
8Ô∏è‚É£ Bitwise operators work, but Math functions generally do not.
*/

// =========================================================
// üß† INTERVIEW QUESTIONS (Basic ‚Üí Advanced)
// =========================================================
/*
üî∏ BASIC
1Ô∏è‚É£ What is BigInt in JavaScript?
2Ô∏è‚É£ Why do we need BigInt instead of Number?
3Ô∏è‚É£ How do you define a BigInt literal?
4Ô∏è‚É£ What happens if you mix Number and BigInt in arithmetic?

üî∏ INTERMEDIATE
5Ô∏è‚É£ How does BigInt behave with comparison operators?
6Ô∏è‚É£ How do you convert BigInt to Number safely?
7Ô∏è‚É£ Can you use BigInt with Math functions like Math.sqrt()?
8Ô∏è‚É£ How does BigInt work with bitwise operators?

üî∏ ADVANCED / LOGICAL
9Ô∏è‚É£ Write a function to safely increment a very large integer (beyond MAX_SAFE_INTEGER).
10Ô∏è‚É£ How to handle BigInt values returned from APIs for IDs or timestamps?
11Ô∏è‚É£ Explain why BigInt division truncates rather than produces decimals.
12Ô∏è‚É£ Can BigInt be used with JSON.stringify and JSON.parse directly?
13Ô∏è‚É£ How would you loop a BigInt range efficiently?
14Ô∏è‚É£ Discuss potential pitfalls of using BigInt in browser vs Node.js environments.
*/

// =========================================================
// üß© ADVANCED LOGICAL CHALLENGE
// =========================================================
function factorialBig(n) {
  let result = 1n;
  for (let i = 2n; i <= n; i++) {
    result *= i;
  }
  return result;
}

const fact50 = factorialBig(50n);
// console.log(fact50); // 30414093201713378043612608166064768844377641568960512000000000000n
